<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RealTimeStocks</name>
    </assembly>
    <members>
        <member name="M:RealTimeStocks.Controllers.StocksController.#ctor(RealTimeStocks.Repositories.IStockRepository,Microsoft.Extensions.Logging.ILogger{RealTimeStocks.Controllers.StocksController},Microsoft.AspNetCore.SignalR.IHubContext{RealTimeStocks.Services.Hubs.StocksHub})">
            <summary>
            Controller For Managing Stocks
            </summary>
            <param name="stockRepository"></param>
            <param name="logger"></param>
            <param name="hubContext"></param>
        </member>
        <member name="M:RealTimeStocks.Controllers.StocksController.GetStocks(RealTimeStocks.Entities.Request.RequestStocksDTO)">
            <summary>
            Method to get stocks
            </summary>
            <param name="requestStocksDTO"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Controllers.StocksController.InsertStock(RealTimeStocks.Entities.Request.InsertStocksDTO)">
            <summary>
            Method To Insert One Stock
            </summary>
            <param name="insertStocksDTO"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{RealTimeStocks.Data.StocksContext})">
            <summary>
            Constructor of Stocks Context Class
            </summary>
            <param name="configuration"></param>
            <param name="logger"></param>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.InsertStock(RealTimeStocks.Entities.Stock.Stock)">
            <summary>
            Insert One Stock
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.InsertStocks(System.Collections.Generic.List{RealTimeStocks.Entities.Stock.Stock})">
            <summary>
            Insert List of Stock
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.UpdateStock(RealTimeStocks.Entities.Stock.Stock)">
            <summary>
            Update One Stock
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.UpdateStocks(System.Collections.Generic.List{RealTimeStocks.Entities.Stock.Stock})">
            <summary>
            Update List of Stock
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.GetStocks(System.Int32,System.Int32,MongoDB.Driver.FilterDefinition{RealTimeStocks.Entities.Stock.Stock},MongoDB.Driver.SortDefinition{RealTimeStocks.Entities.Stock.Stock})">
            <summary>
            Get Stocks List
            </summary>
            <param name="numberOfItems"></param>
            <param name="page"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <returns>Return The stocks finded by page and orders wanted.
            In case there are no stocks return null.
            In case it occurs an error return null and log information</returns>
        </member>
        <member name="M:RealTimeStocks.Data.StocksContext.GetStockByProductSku(System.String)">
            <summary>
            Get Stock By ProductSku
            </summary>
            <param name="productSku"></param>
            <returns>Return The product finded by ProductSku field.
            In case the Stock does not exist return null.
            In case it occurs an error return null and log information
            </returns>
        </member>
        <member name="T:RealTimeStocks.Entities.Enums.FieldToOrderCases">
            <summary>
            Ordering Queries
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FieldToOrderCases.CREATEDATE">
            <summary>
            Order by field CreateDate
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FieldToOrderCases.UPDATEDATE">
            <summary>
            Order by field UpdateDate
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FieldToOrderCases.PRODUCTSKU">
            <summary>
            Order by field ProductSku 
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FieldToOrderCases.TOTALQUANTITY">
            <summary>
            Order by field Total Quantity 
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Enums.FilterCases">
            <summary>
            Filter Cases
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FilterCases.ISPROCESSING">
            <summary>
            ISPROCESSING - Get only stocks in processing
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FilterCases.GETALL">
            <summary>
            GETALL - Get all stocks
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FilterCases.GETDELETED">
            <summary>
            GETDELETED - Get all Deleted stocks
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FilterCases.GETALLOCATED">
            <summary>
            GETALLOCATED - Get all stocks allocated
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FilterCases.GETLOCKED">
            <summary>
            GETLOCKED - Get all stocks locked
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.FilterCases.DEFAULT">
            <summary>
            DEFAULT - Get all stocks by default (are not deleted)
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Enums.OrderEnum">
            <summary>
            Ordering Queries
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.OrderEnum.ASCENDING">
            <summary>
            ASCENDING - ascending order from smaller to greater
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.OrderEnum.DESCENDING">
            <summary>
            DESCENDING - descending order from greater to smaller
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Enums.ResponseStatusEnum">
            <summary>
            Response Status Enum
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.ResponseStatusEnum.OK">
            <summary>
            OK - Request was ok and had no problems
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.ResponseStatusEnum.ERRORUPDATING">
            <summary>
            ERRORUPDATING - Request had an error while updating
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.ResponseStatusEnum.ERRORINSERTING">
            <summary>
            ERRORINSERTING - Request had an error while inserting
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.ResponseStatusEnum.ERRORFETCHING">
            <summary>
            ERRORFETCHING - Request had an error while trying to fetch data
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.ResponseStatusEnum.INTERNALERROR">
            <summary>
            INTERNALERROR - Request had an error internally, one problem might be lack of resources to process the request or connection to DataBase
            </summary>
        </member>
        <member name="F:RealTimeStocks.Entities.Enums.ResponseStatusEnum.INVALIDSTOCKDUPLICATE">
            <summary>
            INVALIDSTOCKDUPLICATE - The stock you are creating already exists
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Request.RequestStocksDTO">
            <summary>
            Request Stocks DTO
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Request.RequestStocksDTO.NumberOfItems">
            <summary>
            Number of items to get
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Request.RequestStocksDTO.Page">
            <summary>
            Number of Page
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Request.RequestStocksDTO.Filter">
            <summary>
            Filter Case
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Request.RequestStocksDTO.OrderOrientation">
            <summary>
            Order Orientation
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Request.RequestStocksDTO.FieldToOrderCase">
            <summary>
            Field Expression to choose What field is used to order
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Request.RequestStocksDTO.Secret">
            <summary>
            Secret it is not supposed to appear
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Response.GenericResponse">
            <summary>
            Generic Response Model
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.GenericResponse.ResponseStatus">
            <summary>
            Status Response in String, can be as one of the following:
            - OK,
            - ERRORUPDATING,
            - ERRORINSERTING,
            - ERRORFETCHING,
            - INTERNALERROR
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.GenericResponse.IsSuccess">
            <summary>
            Property to check if request was successfull
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.GenericResponse.Message">
            <summary>
            Message with information
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Response.StockResponseDTO">
            <summary>
            Stock Response DTO Class
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.Id">
            <summary>
            ID Field Identifier
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.ProductSku">
            <summary>
            Product SKU unique
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.StocksByBatch">
            <summary>
            List of Stock By Batch
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.IsStockLocked">
            <summary>
            Field that indicates if stock is locked
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.IsStockAllocated">
            <summary>
            Field that indicates if stock is allocated
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.IsStockInProcessing">
            <summary>
            Field that indicates if stock is in processing
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.CreateDate">
            <summary>
            Field that indicates creation date
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.UpdateDate">
            <summary>
            Field that indicates last update Date
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.IsDeleted">
            <summary>
            Field that indicates if stock is deleted
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StockResponseDTO.TotalQuantityAvailable">
            <summary>
            Field that indicates total quantity of stock of all batches
            </summary>
        </member>
        <member name="T:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO">
            <summary>
            Stocks By Batch Class DTO 
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO.ProductBatch">
            <summary>
            Field containing product batch identifier
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO.QuantityAvailable">
            <summary>
            Field that indicates quantity available of the current object product batch
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO.QuantityAllocated">
            <summary>
            Field that indicates quantity allocated of the current object product batch
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO.QuantityInProcessing">
            <summary>
            Field that indicates quantity in processing of the current object product batch
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO.LastMovementDate">
            <summary>
            Field that indicates Last Movement Date
            </summary>
        </member>
        <member name="P:RealTimeStocks.Entities.Response.StocksByBatchResponseDTO.LastAllocationDate">
            <summary>
            Field that indicates Last Allocation Date
            </summary>
        </member>
        <member name="T:RealTimeStocks.Repositories.StockRepository">
            <summary>
            Stock Repository
            </summary>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.#ctor(RealTimeStocks.Data.IStocksContext,Microsoft.Extensions.Logging.ILogger{RealTimeStocks.Repositories.StockRepository})">
            <summary>
            Stock Repository Constructor
            </summary>
            <param name="context"></param>
            <param name="logger"></param>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.InsertStock(RealTimeStocks.Entities.Request.InsertStocksDTO)">
            <summary>
            Method to Insert one Stock.
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.InsertStocks(System.Collections.Generic.List{RealTimeStocks.Entities.Stock.Stock})">
            <summary>
            Method to insert stocks
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.GetStocks(System.Int32,System.Int32,RealTimeStocks.Entities.Enums.FilterCases,RealTimeStocks.Entities.Enums.OrderEnum,RealTimeStocks.Entities.Enums.FieldToOrderCases)">
            <summary>
            Method to get stocks
            </summary>
            <param name="numberOfItems"></param>
            <param name="page"></param>
            <param name="filter"></param>
            <param name="orderEnum"></param>
            <param name="fieldToOrderCases"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.GetStockByProductSku(System.String)">
            <summary>
            Get StocksBy Product SKU
            </summary>
            <param name="productSku"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.CheckIfStocksExist(System.Collections.Generic.List{RealTimeStocks.Entities.Stock.Stock})">
            <summary>
            Method To Check if stocks exist
            </summary>
            <param name="stocks"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.GetFilter(RealTimeStocks.Entities.Enums.FilterCases)">
            <summary>
            Private Method to Get Filter to search in DataContext
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:RealTimeStocks.Repositories.StockRepository.GetFieldForOrderExpression(RealTimeStocks.Entities.Enums.FieldToOrderCases)">
            <summary>
            Private Method to Get Expression to Order By the field within the expression
            </summary>
            <param name="fieldToOrderCases"></param>
            <returns></returns>
        </member>
    </members>
</doc>
